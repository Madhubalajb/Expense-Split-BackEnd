{"version":3,"sources":["components/ExpenseForm.js","components/DisplayExpense.js","components/ExpenseModal.js","services/expense-split.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","props","react_default","a","createElement","Container","className","Form","onSubmit","addExpense","Row","Col","Card","Control","onChange","ExpName","placeholder","required","date","type","members","map","member","index","key","value","name","event","Member","Button","variant","onClick","rmMember","title","addMember","Amount","Check","label","radio","checked","isChecked","checkbox","DisplayExpense","ExpenseModal","Modal","Header","Body","amount","url","expense_split","expense","axios","post","then","response","data","App","_useState","useState","_useState2","Object","slicedToArray","expenses","setExpenses","_useState3","_useState4","expName","setExpName","_useState5","_useState6","setDate","_useState7","_useState8","amt","setAmt","_useState9","_useState10","setMembers","_useState11","_useState12","by","setBy","Badge","components_ExpenseForm","target","temp","toConsumableArray","preventDefault","id","length","expense_name","Number","by_whom","expenseServices","returnedExpense","concat","push","splice","components_DisplayExpense","components_ExpenseModal","dummy","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05fce2b2.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Container, Row, Col, Card, Button, Form} from 'react-bootstrap'\r\n\r\nconst ExpenseForm = (props) => {\r\n return (\r\n    <Container className=\"split\">\r\n        <Form onSubmit={props.addExpense} >\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <h4>1. Name your Expense</h4>\r\n                        <Form.Control onChange={props.ExpName} placeholder=\"Expense Name\" required/>\r\n                        <Form.Control onChange={props.date} type=\"date\" placeholder=\"Date\" required/>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Card>\r\n                        <h4>2. Add your group</h4>\r\n                        {\r\n                            props.members.map((member,index) => {\r\n                                return (\r\n                                    <Row key={index}>\r\n                                        <Form.Control className=\"col-sm-9\" value={member.name || \"\"} placeholder=\"Person Name\" onChange={(event) => props.Member(event, index)} required/>\r\n                                        <Button className=\"col-sm-2 minusBtn\" variant=\"dark\" onClick={() => props.rmMember(index)}><b>-</b></Button>\r\n                                    </Row>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button variant=\"dark\" title=\"add more\" onClick={(event) => props.addMember(event)}><b>+</b></Button>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Card>\r\n                        <h4>3. Enter the Expense</h4>\r\n                        <Form.Control onChange={props.Amount} placeholder=\"Amount\" required/>\r\n                        <Row><b>By whom:</b></Row> \r\n                        <Row>\r\n                        {\r\n                            props.members.map((member,index) => {\r\n                                return(\r\n                                    <div key={index}>\r\n                                        <Col><Form.Check type=\"radio\" value={member.name || ''} label={member.name} onChange={props.radio}/></Col>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        </Row>\r\n\r\n                        <Row><b>To whom:</b></Row>\r\n                        <Row>\r\n                        {\r\n                            props.members.map((member,index) => {\r\n                                return(\r\n                                    <div key={index}>\r\n                                        <Col><Form.Check type=\"checkbox\" value={member.name || ''} label={member.name} checked={member.isChecked} onChange={(event) => props.checkbox(event,index)}/></Col>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <Button variant=\"dark\" className=\"split_btn\" type=\"submit\">Finally, Split It</Button>\r\n        </Form>\r\n    </Container>\r\n )\r\n}\r\n\r\nexport default ExpenseForm","import React from 'react'\r\n\r\nconst DisplayExpense = (props) => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayExpense","import React from'react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nconst ExpenseModal = (props) => {\r\n    return (\r\n        <Modal>\r\n            <Modal.Header>props.expense_name</Modal.Header>\r\n            <Modal.Body>\r\n                Date: {props.date}\r\n                Amount spent: {props.amount}\r\n                {/* Members: {props.members.map(member => <li>member.name</li>)} */}\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ExpenseModal","import axios from 'axios';\r\nconst url = '/api/expenses'\r\n\r\nconst getData = () => {\r\n    const request = axios.get(url)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addData = (expense) => {\r\n    const request = axios.post(url, expense)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteData = (expense_id) => {\r\n    const request = axios.delete(`${url}/${expense_id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updateData = (expense_id, expense) => {\r\n    const request = axios.put(`${url}/${expense_id}`, expense)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getData, addData, deleteData, updateData }","import React, {useState} from 'react'\nimport {Badge} from 'react-bootstrap'\nimport ExpenseForm from './components/ExpenseForm'\nimport DisplayExpense from './components/DisplayExpense'\nimport ExpenseModal from './components/ExpenseModal'\nimport expenseServices from './services/expense-split'\n\nconst App = () => {\n  const [expenses, setExpenses] = useState([])\n  const [expName, setExpName] = useState('')\n  const [date, setDate] = useState('')\n  const [amt, setAmt] = useState('')\n  const [members, setMembers] = useState([{name: null, isChecked: false}])\n  const [by, setBy] = useState('')\n  \n  const handleExpName = (event) => setExpName(event.target.value)\n\n  const handleDate = (event) => setDate(event.target.value)\n\n  const handleAmount = (event) => setAmt(event.target.value)\n\n  const handleRadio = (event) => setBy(event.target.value)\n\n  const handleMember = (event, index) => {\n    const temp = [...members]\n    temp[index].name = event.target.value\n    setMembers(temp)\n  }\n \n  const addMember = () => {\n    const temp = [...members]\n    temp.push({name: null, isChecked: false})\n    setMembers(temp)\n  }\n\n  const removeMember = (index) => {\n    const temp = [...members]\n    temp.splice(index, 1)\n    setMembers(temp)\n  }\n\n  const handleCheckbox = (event, index) => {\n    const temp = [...members]\n    temp[index].isChecked = !temp[index].isChecked\n    setMembers(temp)\n  }\n\n  const addExpense = (event) => {\n    event.preventDefault()\n    const expense = {\n      id: expenses.length + 1,\n      expense_name: expName,\n      date: date,\n      members: members,\n      amount: Number(amt),\n      by_whom: by\n    }\n    expenseServices\n      .addData(expense)\n      .then(returnedExpense => {\n        setExpenses(expenses.concat(returnedExpense)) \n        setExpName('')\n        setAmt('')\n      })\n  }\n\n  return (\n    <center>\n      <h2>Expense / Split</h2>\n      <p><Badge>React JS</Badge > + <Badge>REST API</Badge> + <Badge>Node JS</Badge> + <Badge>Express</Badge> + <Badge>MongoDB</Badge></p>\n      <ExpenseForm ExpName={handleExpName} date={handleDate} Amount={handleAmount} Member={handleMember} addExpense={addExpense} addMember={addMember} rmMember={removeMember} members={members} radio={handleRadio} checkbox={handleCheckbox}/>\n      <DisplayExpense />\n      <ExpenseModal dummy={expenses[0]} />\n      <p className=\"bottom\">\n        designed & developed by <a href=\"https://madhubalajb.github.io/\" rel=\"noopener noreferrer\" target=\"_blank\">madhubala jayakumaran</a> <br/>\n        On live since July 2019\n      </p>\n    </center>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}